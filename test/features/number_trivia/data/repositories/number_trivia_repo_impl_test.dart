import 'package:dartz/dartz.dart';
import 'package:flutter_clean_arch_template/core/error/failures.dart';
import 'package:flutter_clean_arch_template/core/error/server_exceptions.dart';
import 'package:flutter_clean_arch_template/core/platform/network_info.dart';
import 'package:flutter_clean_arch_template/number_trivia/data/data_sources/number_trivia_local_data.dart';
import 'package:flutter_clean_arch_template/number_trivia/data/data_sources/number_trivia_remote_data.dart';
import 'package:flutter_clean_arch_template/number_trivia/data/models/number_trivia_model.dart';
import 'package:flutter_clean_arch_template/number_trivia/data/repositories/number_trivia_repo_impl.dart';
import 'package:flutter_clean_arch_template/number_trivia/domain/entities/number_trivia.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

//this mocks is generated by flutter pub run build_runner build
import 'number_trivia_repo_impl_test.mocks.dart';

// class MockRemoteDataSource extends Mock
//     implements NumberTriviaRemoteDataSource {}
//
class MockLocalDataSource extends Mock implements NumberTriviaLocalDataSource {}

// class MockNetworkInfo extends Mock implements NetworkInfo {}

@GenerateMocks([NetworkInfo])
@GenerateMocks([NumberTriviaRemoteDataSource])
// @GenerateMocks([
//   NumberTriviaRemoteDataSource
// ], customMocks: [
//   MockSpec<NumberTriviaRemoteDataSource>(
//       as: #MockNumberTriviaRemoteDataSourceForTest),
// ])
void main() {
  late NumberTriviaRepoImpl repo;
  late MockNumberTriviaRemoteDataSource mockRemoteData;
  late MockLocalDataSource mockLocalData;
  late MockNetworkInfo mockNetwork;

  setUp(() {
    mockRemoteData = MockNumberTriviaRemoteDataSource();
    mockLocalData = MockLocalDataSource();
    mockNetwork = MockNetworkInfo();
    repo = NumberTriviaRepoImpl(remoteData: mockRemoteData, localData: mockLocalData, networkInfo: mockNetwork);
  });


  void runTestsOnline(Function body) {
    group('device is online', () {
      setUp(() {
        when(mockNetwork.isConnected).thenAnswer((_) async => true);
      });
      body();
    });
  }

  void runTestOffline(Function body){
    group('device is offline', () {
      setUp(() {
        when(mockNetwork.isConnected).thenAnswer((_) async => false);
      });
      body();
    });
  }

  group('getConcreteNumberTrivia', () {
    final tNumber = 1;
    final tNumberTriviaModel = NumberTriviaModel(text: 'test trivia', number: tNumber);
   final NumberTrivia tNumberTrivia = tNumberTriviaModel;
   //todo --> still got issue NO IDEA WHY!
    // test('Should check if the device is online', () async {
    //   //arrange
    //   when(mockNetwork.isConnected).thenAnswer((_) async => true);
    //   //act
    //   repo.getConcreteNumberTrivia(1);
    //   //assert
    //   verify(mockNetwork.isConnected);
    // });


    runTestsOnline(() {
      test(
          'should return remote data when the call to remote data source is successful',
              () async {
            //arrange
            when(mockRemoteData.getConcreteNumberTrivia(any))
                .thenAnswer((_) async => tNumberTriviaModel);
            //act
            final result = await repo.getConcreteNumberTrivia(tNumber);
            //assert
            verify(mockRemoteData.getConcreteNumberTrivia(tNumber));
            expect(result, equals(Right(tNumberTrivia)));
          });
      test(
          'should cache the data locally when the call to remote data source is successful',
              () async {
            //arrange
            when(mockRemoteData.getConcreteNumberTrivia(any))
                .thenAnswer((_) async => tNumberTriviaModel);
            //act
            await repo.getConcreteNumberTrivia(tNumber);
            //assert
            verify(mockRemoteData.getConcreteNumberTrivia(tNumber));
            verify(mockLocalData.cacheNumberTrivia(tNumberTriviaModel));
          });
      test(
          'should return server failure when the call to remote data source is unsuccessful',
              () async {
            //arrange
            when(mockRemoteData.getConcreteNumberTrivia(any))
                .thenThrow(ServerExceptions());
            //act
            final result = await repo.getConcreteNumberTrivia(tNumber);
            //assert
            verify(mockRemoteData.getConcreteNumberTrivia(tNumber));
            verifyZeroInteractions(mockLocalData);  //no method is being called
            expect(result, equals(Left(ServerFailure())));
          });
    });
  });


  group('Device is offline', () {
    final tNumber = 1;
    final tNumberTriviaModel = NumberTriviaModel(text: 'test trivia', number: tNumber);
    final NumberTrivia tNumberTrivia = tNumberTriviaModel;

    setUp((){
      when(mockNetwork.isConnected).thenAnswer((_) async => false);
    });

    runTestOffline(() {
      test('should return last locally cached data when the cached is present',
              () async {
            //arrange
            when(mockLocalData.getLastNumberTrivia())
                .thenAnswer((_) async => tNumberTriviaModel);

            //act
            final result = await repo.getConcreteNumberTrivia(tNumber);

            //assert
            verifyNoMoreInteractions(mockRemoteData); //no method being called in remote
            verify(mockLocalData.getLastNumberTrivia());  //verifies a method called!
            expect(result, equals(Right(tNumberTrivia)));
          });


      test('should return cached failure when there is no cached is present',
              () async {
            //arrange
            when(mockLocalData.getLastNumberTrivia())
                .thenThrow(CacheExceptions());

            //act
            final result = await repo.getConcreteNumberTrivia(tNumber);

            //assert
            verifyNoMoreInteractions(mockRemoteData); //no method being called in remote
            verify(mockLocalData.getLastNumberTrivia());  //verifies a method called!
            expect(result, equals(Left(CacheFailure()))); //and not ServerFailure!! coz we're returning cache failure
          });
    });
  });
}


